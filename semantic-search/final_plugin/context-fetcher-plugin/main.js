/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var P=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var R=(p,o)=>{for(var n in o)P(p,n,{get:o[n],enumerable:!0})},_=(p,o,n,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of V(o))!A.call(p,e)&&e!==n&&P(p,e,{get:()=>o[e],enumerable:!(t=B(o,e))||t.enumerable});return p};var q=p=>_(P({},"__esModule",{value:!0}),p);var $={};R($,{default:()=>S});module.exports=q($);var r=require("obsidian");var E=require("obsidian");var F=require("obsidian"),N=require("child_process"),f=class{constructor(o){this.settings=o}async initialize(){}async runPythonScript(o,n,t){return new Promise((e,s)=>{let a=this.settings.pluginDir?require("path").join(this.settings.pluginDir,o):require("path").join(__dirname,o),i=(0,N.spawn)(this.settings.pythonPath,[a,...n],{stdio:["pipe","pipe","pipe"],windowsHide:!0}),l="",d="";i.stdout.on("data",c=>{let m=c.toString("utf8").split(`
`);for(let g of m)if(g)try{let x=JSON.parse(g);x.status==="progress"||x.status==="complete"?t&&t(x):l+=g}catch{l+=g}}),i.stderr.on("data",c=>{d+=c.toString("utf8")}),i.on("close",c=>{if(c!==0){s(new Error(`Python process exited with code ${c}: ${d}`));return}try{let h=JSON.parse(l);if(!h.success){s(new Error(h.error));return}e(h)}catch(h){s(new Error(`Failed to parse Python response: ${h}`))}}),i.on("error",c=>{s(new Error(`Failed to spawn Python process: ${c}`))})})}async searchSimilarContent(o,n=8){try{let e=(await this.runPythonScript("generate_embedding.py",[o])).embeddings,s=await this.runPythonScript("chroma_query.py",["query",JSON.stringify(e),n.toString(),"--host",this.settings.host,"--port",this.settings.port.toString(),"--collection",this.settings.collectionName]);return{documents:[s.results.map(i=>i.document)],metadatas:[s.results.map(i=>i.metadata)],distances:[s.results.map(i=>i.distance)],ids:[s.results.map(i=>i.id)]}}catch(t){throw console.error("ChromaDB query failed:",t),t}}processChromaResults(o,n){if(!o.documents||!o.documents[0]||o.documents[0].length===0)return[];let t=[],e=o.documents[0],s=o.metadatas?.[0]||[],a=o.distances?.[0]||[];for(let i=0;i<e.length;i++){let l=e[i],d=s[i]||{},c=a[i]||1,h=d.relative_path,m=k=>k?.replace(/\\/g,"/").toLowerCase(),g=m(n);if(m(h)===g)continue;let v=d.filename?.replace(".md","")||"Unknown",I=l.substring(0,240),L=d.heading?`#${d.heading}`:"",T=`Distance: ${c.toFixed(2)}`;t.push({type:"reference",note:v,anchor:L,excerpt:I,reason:T})}return t}async fetchContextForNote(o,n){try{let e=(await o.vault.read(n)).toString().replace(/\r\n/g,`
`).replace(/\r/g,`
`),a=`${n.basename}

${e}`,i=await this.searchSimilarContent(a,12);return this.processChromaResults(i,n.path)}catch(t){return console.error("Error fetching context:",t),new F.Notice(`Error fetching context: ${t.message}`),[]}}};var b=require("fs"),y=class{constructor(o){this.chromaService=new f(o)}async fetchContext(o){let{app:n,file:t,setLoading:e,updateContext:s}=o;try{e(!0);let a=await this.chromaService.fetchContextForNote(n,t);s(a)}catch(a){console.error("ChromaDB context fetch failed:",a),new E.Notice(`Context fetch failed: ${a.message}`)}finally{e(!1)}}async readFile(o){return await b.promises.readFile(o,"utf8")}};var w=require("obsidian"),u="context-fetcher-view",C=class extends w.ItemView{constructor(n,t){super(n);this.contextItems=[];this.isLoading=!1;this.plugin=t}getViewType(){return u}getDisplayText(){return"Semantic Context Fetcher"}async onOpen(){let n=this.containerEl.children[1];n.empty();let t=n.createDiv({cls:"context-header-fixed"});t.createEl("h4",{text:"Semantic Context Fetcher"});let e=t.createDiv({cls:"context-search-div"}),s=e.createEl("input",{type:"text",placeholder:"Search..."}),a=e.createEl("button",{text:"Search"}),i=e.createEl("button",{text:"Clear"}),l=e.createEl("button",{text:"Use Current Note"}),d=t.createEl("button",{text:"\u21BB",cls:"context-refresh-button",attr:{"aria-label":"Fetch new context"}});a.addEventListener("click",()=>{let v=s.value;v&&this.plugin.fetchContextForQuery(v)}),i.addEventListener("click",()=>{s.value="",this.updateContext([])}),l.addEventListener("click",()=>{this.plugin.fetchContextForCurrentNote()}),d.addEventListener("click",()=>{this.plugin.fetchContextForCurrentNote()});let c=n.createDiv({cls:"context-scrollable-content"});this.renderContent();let h=n.createDiv({cls:"context-indexing-div"});h.createEl("h5",{text:"Indexing"});let m=h.createEl("button",{text:"Re-index All"}),g=h.createEl("button",{text:"Index Current Note"}),x=h.createEl("button",{text:"Index Folder"});m.addEventListener("click",()=>{this.plugin.reindexAll()}),g.addEventListener("click",()=>{this.plugin.indexCurrentNote()}),x.addEventListener("click",()=>{this.plugin.indexFolder()}),this.updateStatus(this.plugin.settings.totalDocuments)}async onClose(){}setLoading(n){this.isLoading=n,this.renderContent()}updateContext(n){this.contextItems=n,this.renderContent()}renderContent(){let t=this.containerEl.children[1].querySelector(".context-scrollable-content");if(!t)return;let e=t.querySelector(".context-content");e&&e.remove();let s=t.createDiv({cls:"context-content"});if(this.isLoading){s.createEl("div",{text:"Loading context...",cls:"loading-message"});return}if(this.contextItems.length===0){s.createEl("div",{text:"No context items. Fetch context for a note to see relevant information here.",cls:"empty-message"});return}this.contextItems.forEach(a=>{let i=s.createDiv({cls:"context-item"}),l=i.createDiv({cls:"context-note"});l.createEl("a",{text:a.note,cls:"context-note-link",href:"#"}).addEventListener("click",async m=>{m.preventDefault();try{await this.app.workspace.openLinkText(a.note,this.app.workspace.getActiveFile()?.path||"",!0)}catch{new w.Notice(`Could not open link: ${a.note}`)}}),a.anchor&&l.createEl("span",{text:` ${a.anchor}`,cls:"context-anchor"}),i.createDiv({cls:"context-excerpt"}).createEl("p",{text:a.excerpt}),i.createDiv({cls:"context-reason"}).createEl("small",{text:a.reason,cls:"distance-info"})})}updateProgress(n){let t=this.containerEl.children[1],e=t.querySelector(".context-progress-div");e||(e=t.createDiv({cls:"context-progress-div"})),e.empty(),e.createEl("h5",{text:"Indexing Progress"}),e.createEl("p",{text:`Processed ${n.processed} of ${n.total} batches.`})}updateStatus(n){let t=this.containerEl.children[1],e=t.querySelector(".context-status-div");e||(e=t.createDiv({cls:"context-status-div"})),e.empty(),e.createEl("h5",{text:"Index Status"}),e.createEl("p",{text:`${n} documents indexed as of ${new Date().toLocaleString()}`}),e.createEl("button",{text:"Refresh"}).addEventListener("click",()=>{this.plugin.updateDocCount()})}};var O={chromaHost:"localhost",chromaPort:8e3,chromaCollectionName:"notes",pythonPath:"/usr/bin/python3",searchMaxResults:10,foldersToIndex:["learnings","Meetings","My Daily Notes","my_prompts","PWD"],totalDocuments:0},S=class extends r.Plugin{constructor(){super(...arguments);this.contextView=null}async onload(){console.log("Context-fetcher plugin loading..."),await this.loadSettings();let n=this.app.vault.adapter.getBasePath(),t=require("path").join(n,".obsidian","plugins","context-fetcher-plugin"),e={host:this.settings.chromaHost,port:this.settings.chromaPort,collectionName:this.settings.chromaCollectionName,pythonPath:this.settings.pythonPath,pluginDir:t};this.service=new y(e),this.registerView(u,s=>{let a=new C(s,this);return this.contextView=a,a}),this.addRibbonIcon("brain-circuit","Semantic Context Fetcher",()=>{this.activateView()}),this.addCommand({id:"fetch-context",name:"Fetch Context for Current Note",callback:()=>{this.fetchContextForCurrentNote()}}),this.addSettingTab(new D(this.app,this))}async activateView(){let{workspace:n}=this.app,t=null,e=n.getLeavesOfType(u);if(e.length>0)t=e[0];else{if(t=n.getRightLeaf(!1),!t){new r.Notice("Could not open context fetcher view: no available leaf");return}await t.setViewState({type:u,active:!0})}n.revealLeaf(t)}async fetchContextForCurrentNote(){let n=this.app.workspace.getActiveViewOfType(r.MarkdownView);if(!n){let c=this.app.workspace.getLeavesOfType("markdown");c.length>0&&(n=c[0].view)}if(!n){new r.Notice("No markdown view available");return}let t=n.file;if(!t){new r.Notice("No file in active view");return}let e=this.app.workspace.getLeavesOfType(u)[0]?.view,s=c=>e&&e.setLoading(c),a=c=>e&&e.updateContext(c);e&&e.setLoading(!0);let i=this.app.vault.adapter.getBasePath(),l=require("path").join(i,".obsidian","plugins","context-fetcher-plugin"),d={host:this.settings.chromaHost,port:this.settings.chromaPort,collectionName:this.settings.chromaCollectionName,pythonPath:this.settings.pythonPath,pluginDir:l};await this.service.fetchContext({app:this.app,file:t,setLoading:s,updateContext:a})}async fetchContextForQuery(n){let t=this.app.workspace.getLeavesOfType(u)[0]?.view,e=l=>t&&t.setLoading(l),s=l=>t&&t.updateContext(l);t&&t.setLoading(!0);let a=await this.service.chromaService.searchSimilarContent(n,this.settings.searchMaxResults),i=this.service.chromaService.processChromaResults(a,"");s(i),t&&t.setLoading(!1)}async reindexAll(){new r.Notice("Re-indexing all notes...");let n=this.app.workspace.getLeavesOfType(u)[0]?.view,t=async e=>{n&&(n.updateProgress(e),e.status==="complete"&&(this.settings.totalDocuments=e.total_documents,await this.saveSettings(),n.updateStatus(e.total_documents)))};await this.service.chromaService.runPythonScript("manage_index.py",["clear","",this.app.vault.adapter.getBasePath(),"--host",this.settings.chromaHost,"--port",this.settings.chromaPort.toString(),"--collection",this.settings.chromaCollectionName],t);for(let e of this.settings.foldersToIndex)await this.service.chromaService.runPythonScript("manage_index.py",["index",require("path").join(this.app.vault.adapter.getBasePath(),e),this.app.vault.adapter.getBasePath(),"--host",this.settings.chromaHost,"--port",this.settings.chromaPort.toString(),"--collection",this.settings.chromaCollectionName],t);new r.Notice("Re-indexing complete.")}async updateDocCount(){let n=this.app.workspace.getLeavesOfType(u)[0]?.view;try{let t=await this.service.chromaService.runPythonScript("get_doc_count.py",["--host",this.settings.chromaHost,"--port",this.settings.chromaPort.toString(),"--collection",this.settings.chromaCollectionName]);t.success&&(this.settings.totalDocuments=t.total_documents,await this.saveSettings(),n&&n.updateStatus(t.total_documents))}catch{new r.Notice("Could not connect to ChromaDB. Please make sure the Docker container is running.")}}async indexCurrentNote(){let n=this.app.workspace.getActiveFile();if(!n){new r.Notice("No active note to index.");return}new r.Notice(`Indexing ${n.basename}...`),await this.service.chromaService.runPythonScript("manage_index.py",["index",this.app.vault.adapter.getFilePath(n.path),this.app.vault.adapter.getBasePath(),"--host",this.settings.chromaHost,"--port",this.settings.chromaPort.toString(),"--collection",this.settings.chromaCollectionName]),new r.Notice("Indexing complete.")}async indexFolder(){new r.Notice("Indexing all notes in the vault..."),await this.service.chromaService.runPythonScript("manage_index.py",["index",this.app.vault.adapter.getBasePath(),this.app.vault.adapter.getBasePath(),"--host",this.settings.chromaHost,"--port",this.settings.chromaPort.toString(),"--collection",this.settings.chromaCollectionName]),new r.Notice("Indexing complete.")}onunload(){this.app.workspace.detachLeavesOfType(u)}async loadSettings(){return this.settings=Object.assign({},O,await this.loadData()),this.settings}async saveSettings(){await this.saveData(this.settings)}},D=class extends r.PluginSettingTab{constructor(n,t){super(n,t);this.plugin=t}display(){let{containerEl:n}=this;n.empty(),n.createEl("h2",{text:"Context Fetcher Settings"}),new r.Setting(n).setName("ChromaDB Host").setDesc("ChromaDB server host address").addText(t=>t.setPlaceholder("localhost").setValue(this.plugin.settings.chromaHost).onChange(async e=>{this.plugin.settings.chromaHost=e,await this.plugin.saveSettings()})),new r.Setting(n).setName("ChromaDB Port").setDesc("ChromaDB server port").addText(t=>t.setPlaceholder("8000").setValue(this.plugin.settings.chromaPort.toString()).onChange(async e=>{let s=parseInt(e);isNaN(s)||(this.plugin.settings.chromaPort=s,await this.plugin.saveSettings())})),new r.Setting(n).setName("Collection Name").setDesc("ChromaDB collection name for your notes").addText(t=>t.setPlaceholder("notes").setValue(this.plugin.settings.chromaCollectionName).onChange(async e=>{this.plugin.settings.chromaCollectionName=e,await this.plugin.saveSettings()})),new r.Setting(n).setName("Python Path").setDesc("Path to Python executable").addText(t=>t.setPlaceholder("C:\\Users\\Jo.VanEyck\\AppData\\Local\\Programs\\Python\\Python312\\python.exe").setValue(this.plugin.settings.pythonPath).onChange(async e=>{this.plugin.settings.pythonPath=e,await this.plugin.saveSettings()})),new r.Setting(n).setName("Search Results").setDesc("Number of search results to return").addText(t=>t.setPlaceholder("10").setValue(this.plugin.settings.searchMaxResults.toString()).onChange(async e=>{let s=parseInt(e);isNaN(s)||(this.plugin.settings.searchMaxResults=s,await this.plugin.saveSettings())})),new r.Setting(n).setName("Folders to Index").setDesc('A comma-separated list of folders to index when you click "Re-index All". Folder names with spaces do not need to be quoted.').addTextArea(t=>t.setPlaceholder("learnings, Meetings, My Daily Notes, my_prompts, PWD").setValue(this.plugin.settings.foldersToIndex.join(", ")).onChange(async e=>{this.plugin.settings.foldersToIndex=e.split(",").map(s=>s.trim()),await this.plugin.saveSettings()})),new r.Setting(n).setName("Indexed Documents").setDesc("The number of documents that have been indexed.").addText(t=>t.setValue(this.plugin.settings.totalDocuments.toString()).setDisabled(!0))}};
